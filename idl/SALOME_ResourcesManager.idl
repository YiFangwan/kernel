// Copyright (C) 2007-2023  CEA, EDF, OPEN CASCADE
//
// Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
// CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See https://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

#ifndef _SALOME_RESOURCESMANAGER_IDL_
#define _SALOME_RESOURCESMANAGER_IDL_

#include "SALOME_ResourceJob.idl"
#include "SALOME_ResourceContainer.idl"
#include "SALOME_Exception.idl"

/*! \file SALOME_ResourcesManager.idl \brief interfaces for %SALOME Resources Manager service
*/

module Engines
{

//! type to keep procs of machines list 
typedef sequence<long> IntegerList;


/*! \brief Interface of the %resourcesManager
    This interface is used for interaction with the unique instance
    of ResourcesManager
*/
interface ResourcesManager
{
  //!  Find first available resource in a resources list
  string FindFirst(in ResourceList possibleContainerResources);

  //!  Find best available computer according to policy in a computers list
  string Find(in string policy, in ResourceList possibleContainerResources);

  //========================================================================================
  
  //!  Get a list of resources that are best suited to launch a job given constraints 
  /*! 
       The constraints are resource constraints (params) and components constraints (componentList)
  */
  ResourceList GetFittingResourcesJob(in ResourceParametersJob params) raises (SALOME::SALOME_Exception);

  //!  Get a list of resources that are best suited to launch a container given constraints 
  /*! 
       The constraints are resource constraints (params) and components constraints (componentList)
  */
  ResourceList GetFittingResourcesContainer(in ResourceParametersContainer params) raises (SALOME::SALOME_Exception);

  //========================================================================================

  //!  Get definition of a job resource
  ResourceDefinitionJob GetResourceDefinitionJob(in string name) raises (SALOME::SALOME_Exception);

  //!  Get definition of a container resource
  ResourceDefinitionContainer GetResourceDefinitionContainer(in string name) raises (SALOME::SALOME_Exception);

  //========================================================================================

  //! Add a new job resource to the resource_manager
  /*!
      write -> true, resource manager will add it into a xml_file
      xml_file -> could be empty, in this case if write is true, resource manager will write
      the resource in its first ResourceCatalog file
    */
  void AddResourceJob(in ResourceDefinitionJob new_resource, in boolean write, in string xml_file) 
    raises (SALOME::SALOME_Exception);

  //! Add a new container resource to the resource_manager
  /*!
      write -> true, resource manager will add it into a xml_file
      xml_file -> could be empty, in this case if write is true, resource manager will write
      the resource in its first ResourceCatalog file
    */
  void AddResourceContainer(in ResourceDefinitionContainer new_resource, in boolean write, in string xml_file) 
    raises (SALOME::SALOME_Exception);

  //========================================================================================

  //! Remove a job resource from the resource_manager
  /*!
      write -> true, resource manager will write a new xml_file
      xml_file -> could be empty, in this case if write is true, resource manager will write
      the resource in its first ResourceCatalog file
    */
  void RemoveResourceJob(in string resource_name, in boolean write, in string xml_file) 
    raises (SALOME::SALOME_Exception);

  //! Remove a container resource from the resource_manager
  /*!
      write -> true, resource manager will write a new xml_file
      xml_file -> could be empty, in this case if write is true, resource manager will write
      the resource in its first ResourceCatalog file
    */
  void RemoveResourceContainer(in string resource_name, in boolean write, in string xml_file) 
    raises (SALOME::SALOME_Exception);

  //========================================================================================
  
  //! Create a machine file for PaCO container
  string getMachineFile(in string resource_name, in long nb_procs, in string parallelLib)
    raises (SALOME::SALOME_Exception);
  
  //========================================================================================
  
  //! Return list of container resources available (regarding content of CatalogResources.xml). And for each resource the number of proc available of it.
  void ListAllAvailableResourcesContainer(out ResourceList machines, out IntegerList nbProcsOfMachines) raises (SALOME::SALOME_Exception);

  //========================================================================================

  //! Return list of job resources in catalog
  ResourceList ListAllResourcesInCatalogJob() raises (SALOME::SALOME_Exception);

  //! Return list of container resources in catalog
  ResourceList ListAllResourcesInCatalogContainer() raises (SALOME::SALOME_Exception);
};

};
  
#endif
