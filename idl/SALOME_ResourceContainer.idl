// Copyright (C) 2023  CEA/DEN, EDF R&D, OPEN CASCADE
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See https://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

#ifndef _SALOME_RESOURCECONTAINER_IDL_
#define _SALOME_RESOURCECONTAINER_IDL_

#include "SALOME_Resource.idl"

/*! \file SALOME_ResourceContainer.idl \brief interfaces for %SALOME Resource container parameters and definition
*/

module Engines
{

//! components list
typedef sequence<string> CompoList;
  
//! Type to describe required properties of a resource
struct ResourceParametersContainer
{
  // Common for all resources structs
  //========================================================================================

  //! resource name - manual selection
  /*! If a name is provided, the resource will be imposed.
      If the name is an empty string, the resource will be chosen to match
      the other parameters.
  */
  string name;

  //! host name
  string hostname;

  // Common for all resources parameters
  //========================================================================================

  // Permits to configure SALOME resource management
  //! resource management policy : first, cycl, altcycl or best (can be extended)
  string policy;

  //! restricted list of resources to search in
  ResourceList resList;

  // Specific for container resources parameters
  //========================================================================================

  //! if given required operating system 
  string OS;

  //! if given, list of components that could be loaded on a container.
  /*! Ignored if no resources are found with this constraint.*/
  CompoList componentList;

  // Permits to order resources
  //! required number of processors
  /*! This parameter must be specified explicitly, because it is not provided
      by the resource definition.
  */
  long nb_proc;

  //! required memory size
  /*! This parameter must be specified explicitly, because it is not provided
      by the resource definition.

      The parameter specifies the maximum memory value that could be allocated
      for executing the job. This takes into account not only the data that
      could be loaded by the batch process but also the linked dynamic library.
      A possible problem, for example in the case where you use the ssh
      emulation of a batch system, is to get an error message as below
      when libBatch tries to run the ssh command:
\verbatim
/usr/bin/ssh: error while loading shared libraries: libcrypto.so.0.9.8: failed
to map segment from shared object: Cannot allocate memory
\endverbatim
      In this example, the mem_mb was set to 1MB, value that is not
      sufficient to load the dynamic libraries linked to the ssh
      executable (libcrypto.so in the error message).
      So, even in the case of a simple test shell script, you should
      set this value at least to a standard threshold as 500MB.
  */
  long mem_mb;

  //! required frequency
  long cpu_clock;

  //! required number of nodes. Can be used when submitting slurm jobs.
  long nb_node;

  //! required number of proc per node
  long nb_proc_per_node;
};

//!  Type to describe a container resource
struct ResourceDefinitionContainer
{
  // Common for all resources structs
  //========================================================================================

  //! resource name - manual selection
  /*! If a name is provided, the resource will be imposed.
      If the name is an empty string, the resource will be chosen to match
      the other parameters.
  */
  string name;

  //! host name
  string hostname;

  // Common for all resources definitions
  //========================================================================================

  //! protocol to connect to the resource and to start a remote container
  //! Possible values:
  //!   "rsh"   : uses rsh and rcp
  //!   "ssh"   : uses ssh and scp
  //!   "rsync" : uses ssh and rsync
  string protocol;

  //! login name to use to start a remote container
  string username;
  
  //! salome application to use to start a remote container
  string applipath;

  //! batch system
  string batch;

  // Specific for container resources definitions
  //========================================================================================

  //! list of available components.
  //! An empty list means every component is available.
  CompoList componentList;

  //! operating system 
  string OS;

  //! memory size per node
  long mem_mb;

  //! frequency
  long cpu_clock;

  //! number of node
  long nb_node;

  //! number of proc per node
  long nb_proc_per_node;
};

};
  
#endif
